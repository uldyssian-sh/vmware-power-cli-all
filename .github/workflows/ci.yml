name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'

jobs:
  powershell-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        powershell-version: ['5.1', '7.x']
        exclude:
          - os: ubuntu-latest
            powershell-version: '5.1'
          - os: macos-latest
            powershell-version: '5.1'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell
      if: matrix.powershell-version == '7.x' && runner.os != 'Windows'
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install --cask powershell
        fi
    
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
        $results = Invoke-ScriptAnalyzer -Path ./Install-PowerCLI-All.ps1 -ReportSummary
        if ($results) {
          $results | Format-Table
          exit 1
        }
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        if (Test-Path './tests/*.Tests.ps1') {
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          Import-Module Pester
          Invoke-Pester -Path './tests/*.Tests.ps1' -Output Detailed
        } else {
          Write-Host 'No test files found, skipping tests'
        }
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.powershell-version }}
        path: test-results.xml

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run basic security scan
      run: |
        echo "Running security scan..."
        # Check for potential secrets
        if grep -r "password\|secret\|key" --include="*.ps1" . | grep -v "# " | grep -v "param" | grep -v "Get-Credential"; then
          echo "Potential secrets found"
          exit 1
        fi
        echo "Security scan passed"

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        echo "Checking documentation..."
        # Check if README exists
        if [ ! -f "README.md" ]; then
          echo "README.md not found"
          exit 1
        fi
        # Check if docs directory exists
        if [ ! -d "docs" ]; then
          echo "docs directory not found"
          exit 1
        fi
        echo "Documentation check passed"

  release:
    needs: [powershell-test, security-scan, documentation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}